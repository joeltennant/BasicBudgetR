@using BasicBudgetR.Core.Models;
@using BasicBudgetR.Pages.Expenses.Components;
@using BasicBudgetR.Pages.Incomes.Components;
@using BasicBudgetR.Server.Application.Handlers.Incomes;
@using BasicBudgetR.Shared.ComponentTemplates
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@page "/incomes"

<ToolBarPageTemplate BodyColums="8" ToolBarColumns="8">
    <ToolBarTitle>Incomes</ToolBarTitle>
    <ToolBarLeftSide></ToolBarLeftSide>
    <ToolBarRightSide>
        <MudIconButton Icon="@Icons.Material.Outlined.Add" Href="/incomes/add" Style="@($"color:{Colors.Shades.White};")" />
    </ToolBarRightSide>
    @* This is the body of the page *@
    <Body>
        <MudTable Items="@incomes" Dense="true" Striped="true" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Amount</MudTh>
                <MudTh>IsActive</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Amount">@context.Amount</MudTd>
                <MudTd DataLabel="IsActive">@context.IsActive</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" aria-label="View"
                                   Href="@($"/incomes/detail/{@context.IncomeId}")" />
                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@((e) => DeleteIncome(@context.Name,@context.IncomeId))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </Body>
</ToolBarPageTemplate>


@code {
    private bool _hidePosition;
    private bool _loading;
    public IEnumerable<IncomeModel> incomes = new List<IncomeModel>();

    protected override async Task OnInitializedAsync()
    {
        await GetIncomes();
    }

    private async Task GetIncomes()
    {
        _loading = true;
        var result = await _mediator.Send(new All.Request());
        _loading = false;

        if (result.IsSuccess)
        {
            incomes = result.Value;
        }
        else
        {
            Snackbar.Add("Your incomes cannot be loaded at this time.", Severity.Error);
        }
    }

    //delete income
    protected async Task DeleteIncome(string name, long incomeId)
    {
        var parameters = new DialogParameters();
        parameters.Add("Name", name);
        parameters.Add("IncomeId", incomeId);

        var dialog = DialogService.Show<DeleteIncomeDialog>("Delete Income", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetIncomes();
        }
    }
}
