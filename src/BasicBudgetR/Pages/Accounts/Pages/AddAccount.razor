@using BasicBudgetR.Core.Enums;
@using BasicBudgetR.Core.Models;
@using BasicBudgetR.Server.Application.Handlers.Accounts;
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@page "/accounts/add"
<PageTitle>Add Account</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <h2>Add Account</h2>

    </MudItem>
    <MudItem xs="6">
        <MudPaper>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Account Name" @bind-Value="AccountName" Required="true" RequiredError="Account name is required!" />

                <MudNumericField T="decimal" Label="Balance" @bind-Value="Balance" Required="true" RequiredError="Balance is required!" />

                <MudSelect Label="Balance Type" @bind-Value="BalanceType" Required="true" RequiredError="Balance Type is required!">
                    <MudSelectItem Value="BalanceType.Debit">Debit</MudSelectItem>
                    <MudSelectItem Value="BalanceType.Credit">Credit</MudSelectItem>
                </MudSelect>

                <MudSelect Label="Account Type" @bind-Value="AccountTypeId" Required="true" RequiredError="Account Type is required!">
                    @foreach (var accountType in AccountTypeModels)
                    {
                        <MudSelectItem Value="@accountType.AccountTypeId">@accountType.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>Add())">Add Account</MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public string? AccountName { get; set; }
    public decimal Balance { get; set; } = 0.00m;
    public BalanceType BalanceType { get; set; }
    public long AccountTypeId { get; set; }
    public IList<AccountTypeModel> AccountTypeModels { get; set; } = new List<AccountTypeModel>();

    MudForm form;
    private bool success;
    private string[] errors;

    protected async override Task OnInitializedAsync()
    {
        var result = await _mediator.Send(new GetAccountTypes.Request());

        if (result.IsSuccess)
        {
            AccountTypeModels = result.Value;
        }
        else
        {
            Snackbar.Add("Cannot load Account Types.", Severity.Error);
        }
    }

    protected async Task Add()
    {
        var result = await _mediator.Send(new Add.Request
            {
                AccountName = AccountName,
                Balance = Balance,
                BalanceType = BalanceType,
                AccountTypeId = AccountTypeId
            });

        if (result.IsSuccess)
        {
            Snackbar.Add($"Account '{AccountName} has been added.", Severity.Success);
            NavigationManager.NavigateTo("/accounts");
        }
        else
        {
            Snackbar.Add(string.Join(", ", result.Errors), Severity.Error);
        }
    }
}
